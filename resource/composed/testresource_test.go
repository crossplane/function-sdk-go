/*
Copyright 2023 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package composed

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/utils/ptr"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

// TestResource is a generic test resource that mimics a Crossplane managed resource
// without depending on any specific provider.
type TestResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TestResourceSpec   `json:"spec"`
	Status TestResourceStatus `json:"status,omitempty"`
}

// TestResourceSpec defines the desired state of TestResource.
type TestResourceSpec struct {
	v1.ResourceSpec `json:",inline"`

	ForProvider TestResourceParameters `json:"forProvider"`
}

// TestResourceParameters are the configurable fields of a TestResource.
type TestResourceParameters struct {
	Region *string `json:"region,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// TestResourceStatus represents the observed state of a TestResource.
type TestResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
}

// Implement runtime.Object interface.
func (tr *TestResource) DeepCopyObject() runtime.Object {
	return tr.DeepCopy()
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestResource.
func (tr *TestResource) DeepCopy() *TestResource {
	if tr == nil {
		return nil
	}
	out := new(TestResource)
	tr.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (tr *TestResource) DeepCopyInto(out *TestResource) {
	*out = *tr
	out.TypeMeta = tr.TypeMeta
	tr.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	tr.Spec.DeepCopyInto(&out.Spec)
	out.Status = tr.Status
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (trs *TestResourceSpec) DeepCopyInto(out *TestResourceSpec) {
	*out = *trs
	trs.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (trp *TestResourceParameters) DeepCopyInto(out *TestResourceParameters) {
	*out = *trp
	if trp.Region != nil {
		out.Region = ptr.To(*trp.Region)
	}
	if trp.Name != nil {
		out.Name = ptr.To(*trp.Name)
	}
}

// Test resource constants.
const (
	TestResourceKind       = "TestResource"
	TestResourceAPIVersion = "example.org/v1alpha1"
)

var (
	TestResourceGroupVersion = schema.GroupVersion{Group: "example.org", Version: "v1alpha1"}
	TestResourceGroupKind    = schema.GroupKind{Group: "example.org", Kind: TestResourceKind}
)

// AddTestResourceToScheme adds the test resource to the given scheme.
func AddTestResourceToScheme(scheme *runtime.Scheme) {
	scheme.AddKnownTypes(TestResourceGroupVersion, &TestResource{})
	metav1.AddToGroupVersion(scheme, TestResourceGroupVersion)
}
